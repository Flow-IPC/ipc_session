# Flow-IPC: Sessions
# Copyright 2023 Akamai Technologies, Inc.
#
# Licensed under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in
# compliance with the License.  You may obtain a copy
# of the License at
#
#   https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in
# writing, software distributed under the License is
# distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
# CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing
# permissions and limitations under the License.

# Current version assumption: clang-15/16/17.

# Had some issues matching ^ and $ in this one; leaving them out; these are very unlikely to match something
# unintentional.

# Seen locally (by ygoldfel; clang-17) but not in automated pipeline, this nevertheless looks like it could
# pop up there, or anywhere, depending on timing. The good news is it's a straightforward false positive.
# It manifests as
#   SUMMARY: ThreadSanitizer: data race (.../test/suite/unit_test/libipc_unit_test.exec+0xd2264) ... in strcmp
# but more saliently is a "race" between two threads concurrently each opening a bipc::named_mutex, in open-or-create
# mode of operation.  (In this case it is "even" named the same thing for both... which is the whole point of it being
# a cross-process *named* mutex.)  In unit_test, `Client_session`s are opened in parallel, so each one's
# internal Client_session_impl legitimately does the named_mutex opening.  Inside that Boost (bipc) code
# it calls into glibc to open a semaphore; the strcmp() is within glibc.  This is a completely vanilla opening of
# semaphores by name; so either glibc has thread-unsafe code there (unlikely), or it's a false positive by TSAN
# while checking glibc code (perhaps glibc itself would need to be instrumented to eliminate it?), but either way
# for our context it's a false positive.
race:boost::interprocess::named_mutex::named_mutex
